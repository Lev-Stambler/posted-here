{"version":3,"sources":["./app/app-styles.tsx","./app/app.tsx","./app/map.tsx","./main.tsx"],"names":["overlayStyle","position","left","right","top","bottom","overflow","background","justifyContent","alignItems","inputWrapperStyle","display","width","padding","App","textAlign","height","dateFromTime","time","console","log","date","Date","times","split","hours","minutes","parseInt","setHours","setMinutes","setSeconds","timeFromDate","twoLong","n","getHours","getMinutes","NewMarkerPopup","props","name","setName","useState","startTime","setStartTime","endTime","setEndTime","onSubmit","ret","fetch","method","headers","body","JSON","stringify","info","lat","lng","availabilities","status","alert","successClbk","vis","e","target","value","MapWithAMarker","withScriptjs","withGoogleMap","markers","setMarkers","newMarkerVis","setNewMarkerVis","setLat","setLng","onMarkerClick","latLng","useEffect","then","json","markerInfos","window","location","reload","map","marker","GoogleMapCustom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"main.js","sourcesContent":["import React from 'react';\n\nexport const overlayStyle = {\n  position: 'fixed',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  overflow: 'hidden',\n  // see through grey\n  background: '#c8c8c894',\n  justifyContent: 'center',\n  alignItems: 'center',\n  'z-index': 1000,\n} as React.CSSProperties;\n\nexport const inputWrapperStyle = {\n  display: 'block',\n  width: '100%',\n  padding: '1rem',\n};\n","import React, { useEffect, useState } from 'react';\nimport { Message } from '@postedhere/api-interfaces';\nimport GoogleMapCustom from './map';\n\nexport const App = () => {\n  return (\n    <>\n      <div style={{ textAlign: 'center', height: '100vh', width: '100%' }}>\n        <GoogleMapCustom />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React, { Component, useState, useEffect } from 'react';\nimport {\n  GoogleMap,\n  Marker,\n  withScriptjs,\n  withGoogleMap,\n} from 'react-google-maps';\nimport {\n  MarkerInfo,\n  NewMarker,\n  GetAllMarkers,\n} from '@postedhere/api-interfaces';\nimport { overlayStyle, inputWrapperStyle } from './app-styles';\n\nfunction dateFromTime(time: string) {\n  console.log(time);\n  const date = new Date();\n  const times = time.split(':'); // replace with \":\" for differently displayed time.\n  const hours = times[0];\n  const minutes = times[1];\n\n  console.log(parseInt(hours), parseInt(minutes));\n  date.setHours(parseInt(hours));\n  date.setMinutes(parseInt(minutes));\n  date.setSeconds(0);\n\n  return date;\n}\n\nfunction timeFromDate(date: Date) {\n  function twoLong(n: number) {\n    return n < 10 ? `0${n}` : `${n}`;\n  }\n  return `${twoLong(date.getHours())}:${twoLong(date.getMinutes())}`;\n}\n\nconst NewMarkerPopup = (props: {\n  vis: boolean;\n  lat: number;\n  lng: number;\n  successClbk: () => void;\n}) => {\n  const [name, setName] = useState('');\n  const [startTime, setStartTime] = useState(new Date());\n  const [endTime, setEndTime] = useState(new Date());\n  async function onSubmit() {\n    const ret = await fetch('http://localhost:3333/api_v1/marker', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        info: {\n          lat: props.lat,\n          lng: props.lng,\n          availabilities: [\n            {\n              name,\n              startTime,\n              endTime,\n            },\n          ],\n        },\n      } as NewMarker),\n    });\n    if (ret.status === 204) {\n      alert('Success!');\n      props.successClbk();\n    }\n  }\n\n  return (\n    <div style={{ display: `${props.vis ? 'grid' : 'none'}`, ...overlayStyle }}>\n      <div\n        className=\"modal\"\n        style={{\n          background: 'white',\n          padding: '2rem',\n          display: 'grid',\n          justifyContent: 'start',\n        }}\n      >\n        <p></p>\n        <div style={inputWrapperStyle}>\n          <input\n            type=\"text\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"An identifiable name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </div>\n        <div style={inputWrapperStyle}>\n          <label htmlFor=\"\">Availability start time </label>\n          <input\n            type=\"time\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"\"\n            value={timeFromDate(startTime)}\n            onChange={(e) => setStartTime(dateFromTime(e.target.value))}\n          />\n        </div>\n        <div style={inputWrapperStyle}>\n          <label htmlFor=\"\">Availability end time </label>\n          <input\n            type=\"time\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"\"\n            value={timeFromDate(endTime)}\n            onChange={(e) => setEndTime(dateFromTime(e.target.value))}\n          />\n        </div>\n        <input type=\"button\" value=\"Post here!\" onClick={() => onSubmit()} />\n      </div>\n    </div>\n  );\n};\n\nconst MapWithAMarker = withScriptjs<any>(\n  withGoogleMap((props) => {\n    const [markers, setMarkers] = useState<MarkerInfo[]>([]);\n    const [newMarkerVis, setNewMarkerVis] = useState(false);\n    const [lat, setLat] = useState(0);\n    const [lng, setLng] = useState(0);\n    function onMarkerClick(e) {\n      setLat(e.latLng.lat());\n      setLng(e.latLng.lng());\n      setNewMarkerVis(true);\n      // setMarkers([...markers, { lat, lng, people: [{ name: 'Lev' }] }]);\n    }\n    useEffect(() => {\n      fetch('http://localhost:3333/api_v1/all-markers').then(async (ret) => {\n        const body = (await ret.json()) as GetAllMarkers;\n        setMarkers(body.markerInfos);\n      });\n    }, []);\n    return (\n      <GoogleMap\n        defaultZoom={18}\n        defaultCenter={{ lat: 40.4427, lng: -79.943 }}\n        onClick={onMarkerClick}\n      >\n        <NewMarkerPopup\n          vis={newMarkerVis}\n          lat={lat}\n          lng={lng}\n          successClbk={() => window.location.reload()}\n        />\n        {markers.map((marker) => (\n          <Marker position={{ lat: marker.lat, lng: marker.lng }} />\n        ))}\n      </GoogleMap>\n    );\n  })\n);\n\nexport interface GoogleMapProps {\n  isMarkerShown?: boolean;\n}\n\nconst GoogleMapCustom = (props: GoogleMapProps) => {\n  return (\n    <MapWithAMarker\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDNHLik16D00yU-MKF0vqt2yp_v8UqPh7w&v=3.exp&libraries=geometry,drawing,places\"\n      loadingElement={<div style={{ height: `100%` }} />}\n      containerElement={<div style={{ height: `100%` }} />}\n      mapElement={<div style={{ height: `100%` }} />}\n    />\n  );\n};\n\nexport default GoogleMapCustom;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":"webpack:///"}